import logging
import os # ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶™‡ßú‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import requests
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# --- ‡¶¨‡¶ü ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
# ‡¶è‡¶á ‡¶Æ‡¶æ‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶π‡ßã‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ Environment Variables ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá‡•§
BOT_TOKEN = os.environ.get("BOT_TOKEN")
LOG_CHANNEL_ID = os.environ.get("LOG_CHANNEL_ID") # ‡¶è‡¶ü‡¶ø ‡¶∏‡¶æ‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶ø‡¶ï ‡¶Ü‡¶á‡¶°‡¶ø ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def send_log_message(bot_instance: Bot, message_text: str):
    if LOG_CHANNEL_ID:
        try:
            numeric_log_channel_id = int(LOG_CHANNEL_ID)
            bot_instance.send_message(chat_id=numeric_log_channel_id, text=message_text)
            logger.info(f"Log sent to channel {LOG_CHANNEL_ID}")
        except ValueError:
            logger.error(f"LOG_CHANNEL_ID '{LOG_CHANNEL_ID}' is not a valid integer.")
        except Exception as e:
            logger.error(f"Failed to send log to channel {LOG_CHANNEL_ID}: {e}")
    else:
        logger.info("LOG_CHANNEL_ID not set. Skipping log message to channel. Logged to console: " + message_text)

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
def start(update: Update, context: CallbackContext):
    user_name = update.effective_user.first_name
    welcome_message = (
        f"‡¶π‡¶æ‡¶á {user_name}! üëã\n\n"
        "‡¶Ü‡¶Æ‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶¨‡¶ü‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶æ‡¶á‡¶≤ (‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü, ‡¶õ‡¶¨‡¶ø, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì, ‡¶Ö‡¶°‡¶ø‡¶ì) ‡¶™‡¶æ‡¶†‡¶æ‡¶®,\n"
        "‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶ø transfer.sh-‡¶è ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡ßá‡¶¨‡ßã‡•§"
    )
    update.message.reply_text(welcome_message)
    send_log_message(context.bot, f"User {user_name} (ID: {update.effective_user.id}) started the bot.")

# ‡¶´‡¶æ‡¶á‡¶≤ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü, ‡¶õ‡¶¨‡¶ø, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì, ‡¶Ö‡¶°‡¶ø‡¶ì)
def handle_file(update: Update, context: CallbackContext):
    message = update.message
    user = update.effective_user
    file_name_original = "unknown_file"
    file_obj = None

    if message.document:
        file_obj = message.document
        file_name_original = file_obj.file_name
    elif message.photo:
        file_obj = message.photo[-1]
        file_name_original = f"photo_{file_obj.file_unique_id}.jpg"
    elif message.video:
        file_obj = message.video
        file_name_original = file_obj.file_name if file_obj.file_name else f"video_{file_obj.file_unique_id}.mp4"
    elif message.audio:
        file_obj = message.audio
        file_name_original = file_obj.file_name if file_obj.file_name else f"audio_{file_obj.file_unique_id}.mp3"
    else:
        message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü, ‡¶õ‡¶¨‡¶ø, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¨‡¶æ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§")
        return

    if not file_obj:
        message.reply_text("‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return

    try:
        bot_file = context.bot.get_file(file_obj.file_id)
        file_content_bytes = bot_file.download_as_bytearray()
        message.reply_text(f"'{file_name_original}' ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶™‡ßá‡ßü‡ßá‡¶õ‡¶ø‡•§ transfer.sh-‡¶è ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...")
        log_msg_start = f"User {user.first_name} (ID: {user.id}) sent file: '{file_name_original}'. Starting upload."
        send_log_message(context.bot, log_msg_start)

        safe_file_name = "".join(c if c.isalnum() or c in ('.', '_') else '_' for c in file_name_original)
        if not safe_file_name:
            safe_file_name = f"file_{file_obj.file_unique_id}"
        upload_url = f"https://transfer.sh/{safe_file_name}"
        
        response = requests.put(upload_url, data=bytes(file_content_bytes))
        response.raise_for_status()
        download_link = response.text.strip()
        
        success_message = (
            f"‚úÖ '{file_name_original}' ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá!\n\n"
            f"üîó ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï: {download_link}\n\n"
            "(‡¶è‡¶á ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡ßß‡ß™ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ŸÅÿπÿßŸÑ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)"
        )
        message.reply_text(success_message)
        log_msg_success = f"Successfully uploaded '{file_name_original}' for user {user.first_name} (ID: {user.id}). Link: {download_link}"
        send_log_message(context.bot, log_msg_success)

    except Exception as e:
        logger.error(f"Error processing file for {user.first_name} (ID: {user.id}), File: '{file_name_original}': {e}", exc_info=True)
        message.reply_text(f"'{file_name_original}' ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§\n‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {type(e).__name__}")
        send_log_message(context.bot, f"Failed to upload '{file_name_original}' for user {user.first_name} (ID: {user.id}). Error: {type(e).__name__} - {e}")

def main():
    if not BOT_TOKEN:
        logger.critical("üî¥ BOT_TOKEN is not set! The bot cannot start. Please set it as an environment variable.")
        return
    if not LOG_CHANNEL_ID:
        logger.warning("üü° LOG_CHANNEL_ID is not set! Log messages will not be sent to any Telegram channel, only to console.")

    try:
        startup_bot_instance = Bot(token=BOT_TOKEN)
    except Exception as e:
        logger.critical(f"üî¥ Failed to create Bot instance with BOT_TOKEN. Error: {e}. The bot cannot start.")
        return

    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.document | Filters.photo | Filters.video | Filters.audio, handle_file))

    send_log_message(startup_bot_instance, "üöÄ ‡¶¨‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶°‡•§")
    logger.info("Bot has started polling...")
    updater.start_polling()
    updater.idle()
    send_log_message(startup_bot_instance, "üõë ‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§")
    logger.info("Bot has stopped.")

if __name__ == '__main__':
    main()