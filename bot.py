import os
import telebot
import requests
import logging

# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи ржПржЦрж╛ржирзЗ ржжрж┐ржи
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    print("рждрзНрж░рзБржЯрж┐: BOT_TOKEN ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")
    exit()

bot = telebot.TeleBot(BOT_TOKEN)
logger = telebot.logger
telebot.logger.setLevel(logging.INFO) # рж▓ржЧрж┐ржВ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рж╛

# Gofile.io рж╕рж╛рж░рзНржнрж╛рж░ ржкрж╛ржУрзЯрж╛рж░ ржЬржирзНржп API ржПржирзНржбржкржпрж╝рзЗржирзНржЯ
GOFILE_API_SERVER_URL = 'https://api.gofile.io/getServers'
# ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рж╛рж░ ржЬржирзНржп Gofile.io API ржПржирзНржбржкржпрж╝рзЗржирзНржЯ (рж╕рж╛рж░рзНржнрж╛рж░ ржкрж╛ржУрзЯрж╛рж░ ржкрж░ ржлрж░ржорзНржпрж╛ржЯ ржХрж░рж╛ рж╣ржмрзЗ)
GOFILE_UPLOAD_URL_FORMAT = 'https://{server}.gofile.io/uploadFile'

# /start ржПржмржВ /help ржХржорж╛ржирзНржбрзЗрж░ ржЬржирзНржп рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "рж╕рзНржмрж╛ржЧрждржо! ЁЯСЛ\n\nржЖржорж╛ржХрзЗ ржпрзЗржХрзЛржирзЛ ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржи, ржЖржорж┐ рж╕рзЗржЯрж┐ Gofile.io рждрзЗ ржЖржкрж▓рзЛржб ржХрж░рзЗ ржЖржкржирж╛ржХрзЗ ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржВржХ ржжрзЗржмрзЛред")

# ржбржХрзБржорзЗржирзНржЯ (ржпрзЗржХрзЛржирзЛ ржлрж╛ржЗрж▓) рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@bot.message_handler(content_types=['document', 'video', 'audio', 'photo', 'voice', 'sticker'])
def handle_docs(message):
    try:
        file_info = None
        file_name = "uploaded_file" # ржбрж┐ржлрж▓рзНржЯ ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо

        if message.document:
            file_info = bot.get_file(message.document.file_id)
            file_name = message.document.file_name
        elif message.video:
            file_info = bot.get_file(message.video.file_id)
            file_name = f"video_{message.video.file_id}.{message.video.mime_type.split('/')[1] if message.video.mime_type else 'mp4'}"
        elif message.audio:
            file_info = bot.get_file(message.audio.file_id)
            file_name = f"audio_{message.audio.file_id}.{message.audio.mime_type.split('/')[1] if message.audio.mime_type else 'mp3'}"
        elif message.photo:
            # ржЫржмрж┐ржЧрзБрж▓рзЛ ржмрж┐ржнрж┐ржирзНржи рж╕рж╛ржЗржЬрзЗ ржЖрж╕рзЗ, рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬржЯрж╛ ржирж┐ржЪрзНржЫрж┐
            file_info = bot.get_file(message.photo[-1].file_id)
            file_name = f"photo_{message.photo[-1].file_id}.jpg"
        elif message.voice:
            file_info = bot.get_file(message.voice.file_id)
            file_name = f"voice_{message.voice.file_id}.ogg"
        elif message.sticker:
            if message.sticker.is_animated or message.sticker.is_video:
                bot.reply_to(message, "ржжрзБржГржЦрж┐ржд, ржЕрзНржпрж╛ржирж┐ржорзЗржЯрзЗржб ржмрж╛ ржнрж┐ржбрж┐ржУ рж╕рзНржЯрж┐ржХрж╛рж░ ржЖржкрж▓рзЛржб ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред рж╕рж╛ржзрж╛рж░ржг рж╕рзНржЯрж┐ржХрж╛рж░ (webp) ржкрж╛ржарж╛ржиред")
                return
            file_info = bot.get_file(message.sticker.file_id)
            file_name = f"sticker_{message.sticker.file_id}.webp"

        if not file_info:
            bot.reply_to(message, "ржжрзБржГржЦрж┐ржд, ржлрж╛ржЗрж▓ржЯрж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ ржпрж╛рзЯржирж┐ред")
            return

        # ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржЬрж╛ржирж╛ржирзЛ рж╣ржЪрзНржЫрзЗ ржпрзЗ ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб ржУ ржЖржкрж▓рзЛржб рж╢рзБрж░рзБ рж╣рзЯрзЗржЫрзЗ
        processing_message = bot.reply_to(message, "ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... тП│")

        downloaded_file = bot.download_file(file_info.file_path)

        # Gofile.io рж╕рж╛рж░рзНржнрж╛рж░ ржкрж╛ржУрзЯрж╛
        try:
            server_response = requests.get(GOFILE_API_SERVER_URL)
            server_response.raise_for_status() # HTTPуВиуГйуГ╝уБоуГБуВзуГГуВп
            server_data = server_response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Gofile рж╕рж╛рж░рзНржнрж╛рж░ ржкрзЗрждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
            bot.edit_message_text(chat_id=processing_message.chat.id, message_id=processing_message.message_id, text="ржжрзБржГржЦрж┐ржд, Gofile.io рж╕рж╛рж░рзНржнрж╛рж░ ржкрзЗрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
            return
        except ValueError: # JSON ржбрж┐ржХрзЛржб рж╕ржорж╕рзНржпрж╛
            logger.error(f"Gofile рж╕рж╛рж░рзНржнрж╛рж░ рж░рзЗрж╕ржкржирзНрж╕ JSON ржкрж╛рж░рзНрж╕ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {server_response.text}")
            bot.edit_message_text(chat_id=processing_message.chat.id, message_id=processing_message.message_id, text="ржжрзБржГржЦрж┐ржд, Gofile.io ржерзЗржХрзЗ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд ржЙрждрзНрждрж░ ржПрж╕рзЗржЫрзЗред")
            return


        if server_data.get('status') == 'ok':
            server_name = server_data['data']['server']
            upload_url = GOFILE_UPLOAD_URL_FORMAT.format(server=server_name)

            # ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рж╛
            files = {'file': (file_name, downloaded_file)}
            try:
                upload_response = requests.post(upload_url, files=files)
                upload_response.raise_for_status() # HTTPуВиуГйуГ╝уБоуГБуВзуГГуВп
                upload_data = upload_response.json()
            except requests.exceptions.RequestException as e:
                logger.error(f"Gofile ржЖржкрж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
                bot.edit_message_text(chat_id=processing_message.chat.id, message_id=processing_message.message_id, text="ржжрзБржГржЦрж┐ржд, Gofile.io рждрзЗ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред")
                return
            except ValueError: # JSON ржбрж┐ржХрзЛржб рж╕ржорж╕рзНржпрж╛
                 logger.error(f"Gofile ржЖржкрж▓рзЛржб рж░рзЗрж╕ржкржирзНрж╕ JSON ржкрж╛рж░рзНрж╕ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {upload_response.text}")
                 bot.edit_message_text(chat_id=processing_message.chat.id, message_id=processing_message.message_id, text="ржжрзБржГржЦрж┐ржд, Gofile.io ржерзЗржХрзЗ ржЖржкрж▓рзЛржб ржХрж░рж╛рж░ ржкрж░ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд ржЙрждрзНрждрж░ ржПрж╕рзЗржЫрзЗред")
                 return


            if upload_data.get('status') == 'ok':
                download_page = upload_data['data']['downloadPage']
                file_link = upload_data['data']['directLink'] if 'directLink' in upload_data['data'] else download_page # рж╕рж░рж╛рж╕рж░рж┐ рж▓рж┐ржВржХ ржирж╛ ржерж╛ржХрж▓рзЗ ржбрж╛ржЙржирж▓рзЛржб ржкрзЗржЗржЬ рж▓рж┐ржВржХ
                reply_text = f"тЬЕ ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкрж▓рзЛржб рж╣рзЯрзЗржЫрзЗ!\n\nЁЯФЧ ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржВржХ: {download_page}"
                if 'directLink' in upload_data['data']: # ржХрж┐ржЫрзБ ржлрж╛ржЗрж▓рзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржбрж┐рж░рзЗржХрзНржЯ рж▓рж┐ржВржХ ржирж╛ржУ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ
                     reply_text += f"\n\nЁЯФЧ рж╕рж░рж╛рж╕рж░рж┐ ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржВржХ: {file_link} (ржПржЯрж┐ ржХрж┐ржЫрзБ рж╕ржорзЯ ржкрж░ ржХрж╛ржЬ ржирж╛ржУ ржХрж░рждрзЗ ржкрж╛рж░рзЗ)"

                bot.edit_message_text(chat_id=processing_message.chat.id, message_id=processing_message.message_id, text=reply_text)
                logger.info(f"ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб рж╕ржлрж▓: {download_page}")
            else:
                error_message = upload_data.get('status')
                logger.error(f"Gofile ржЖржкрж▓рзЛржб ржмрзНржпрж░рзНрже: {error_message}")
                bot.edit_message_text(chat_id=processing_message.chat.id, message_id=processing_message.message_id, text=f"ржжрзБржГржЦрж┐ржд, Gofile.io рждрзЗ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рж╛ ржпрж╛рзЯржирж┐ред ржХрж╛рж░ржг: {error_message}")
        else:
            error_message = server_data.get('status')
            logger.error(f"Gofile рж╕рж╛рж░рзНржнрж╛рж░ ржкрзЗрждрзЗ ржмрзНржпрж░рзНрже: {error_message}")
            bot.edit_message_text(chat_id=processing_message.chat.id, message_id=processing_message.message_id, text=f"ржжрзБржГржЦрж┐ржд, Gofile.io рж╕рж╛рж░рзНржнрж╛рж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржХрж╛рж░ржг: {error_message}")

    except Exception as e:
        logger.error(f"ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ: {e}")
        try:
            # ржпржжрж┐ processing_message рждрзИрж░рж┐ рж╣рзЯрзЗ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж┐ ржПржбрж┐ржЯ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи
            if 'processing_message' in locals() and processing_message:
                 bot.edit_message_text(chat_id=processing_message.chat.id, message_id=processing_message.message_id, text="ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
            else: # ржЕржирзНржпржерж╛рзЯ ржирждрзБржи ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржи
                 bot.reply_to(message, "ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        except Exception as ex: # ржпржжрж┐ ржорзЗрж╕рзЗржЬ ржПржбрж┐ржЯ ржмрж╛ рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рждрзЗржУ рж╕ржорж╕рзНржпрж╛ рж╣рзЯ
            logger.error(f"рждрзНрж░рзБржЯрж┐рж░ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗржУ рж╕ржорж╕рзНржпрж╛: {ex}")


if __name__ == '__main__':
    print("ржмржЯ ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ...")
    try:
        bot.infinity_polling(logger_level=logging.INFO)
    except Exception as e:
        logger.error(f"ржмржЯ ржЪрж╛рж▓рзБ рж╣рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        print(f"ржмржЯ ржЪрж╛рж▓рзБ рж╣рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
